apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: wes-chirpstack-postgresql
spec:
  selector:
    matchLabels:
      app: wes-chirpstack-postgresql
  serviceName: wes-chirpstack-postgresql
  template:
    metadata:
      labels:
        app: wes-chirpstack-postgresql
    spec:
      priorityClassName: wes-high-priority
      # to ensure we are able to access the PVC
      nodeSelector:
        node-role.kubernetes.io/master: "true"
      containers:
        - name: wes-chirpstack-postgresql
          image: postgres:15.0-alpine3.16
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgresql
              containerPort: 5432
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              memory: 150Mi
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          envFrom:
            - configMapRef:
                name: wes-identity
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: data
            - mountPath: /docker-entrypoint-initdb.d
              name: chirpstack-postgresql-configmap-volume
          startupProbe:
            tcpSocket:
              port: postgresql
            initialDelaySeconds: 5
            timeoutSeconds: 10
            failureThreshold: 10
            periodSeconds: 30
          livenessProbe:
            tcpSocket:
              port: postgresql
            timeoutSeconds: 10
            failureThreshold: 3
            periodSeconds: 60
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data
        - name: chirpstack-postgresql-configmap-volume
          configMap:
            name: chirpstack-postgresql-init-cm
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Mi
